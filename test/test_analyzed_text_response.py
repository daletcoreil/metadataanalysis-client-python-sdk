# coding: utf-8

"""
    Dalet Metadata Analysis API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: cortexsupport@dalet.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import metadataanalysis_client
from metadataanalysis_client.models.analyzed_text_response import AnalyzedTextResponse  # noqa: E501
from metadataanalysis_client.rest import ApiException

class TestAnalyzedTextResponse(unittest.TestCase):
    """AnalyzedTextResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AnalyzedTextResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = metadataanalysis_client.models.analyzed_text_response.AnalyzedTextResponse()  # noqa: E501
        if include_optional :
            return AnalyzedTextResponse(
                language = '0', 
                language_is_reliable = True, 
                entities = [
                    metadataanalysis_client.models.entity.Entity(
                        name = '0', 
                        type = 'UNKNOWN', 
                        mid = '0', 
                        wikipedia_url = '0', 
                        salience = 1.337, 
                        mentions = [
                            metadataanalysis_client.models.mention.Mention(
                                text = metadataanalysis_client.models.span.Span(
                                    content = '0', 
                                    begin_offset = 1.337, ), 
                                type = 'TYPEUNKNOWN', )
                            ], )
                    ], 
                topics = [
                    metadataanalysis_client.models.topic.Topic(
                        id = '0', 
                        label = '0', 
                        wiki_link = '0', 
                        score = 1.337, 
                        wikidata_id = '0', )
                    ], 
                categories = [
                    metadataanalysis_client.models.classifier_category.ClassifierCategory(
                        id = '0', 
                        classifier_id = 'IPTCNewsCodes', 
                        category_id = '0', 
                        label = '0', 
                        score = 1.337, )
                    ]
            )
        else :
            return AnalyzedTextResponse(
                language = '0',
        )

    def testAnalyzedTextResponse(self):
        """Test AnalyzedTextResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
