# coding: utf-8

"""
    Dalet Metadata Analysis API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: cortexsupport@dalet.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from metadataanalysis_client.api_client import ApiClient
from metadataanalysis_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MetadataAnalysisApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def analyze(self, project_service_id, analyze_request, **kwargs):  # noqa: E501
        """analyze  # noqa: E501

        Perform metadata analysis on the provided text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyze(project_service_id, analyze_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_service_id: Project service id of the client associated to the request (required)
        :param AnalyzeRequest analyze_request: Text to be analyzed and list of requested analysis methods. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AnalyzedTextResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.analyze_with_http_info(project_service_id, analyze_request, **kwargs)  # noqa: E501

    def analyze_with_http_info(self, project_service_id, analyze_request, **kwargs):  # noqa: E501
        """analyze  # noqa: E501

        Perform metadata analysis on the provided text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyze_with_http_info(project_service_id, analyze_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_service_id: Project service id of the client associated to the request (required)
        :param AnalyzeRequest analyze_request: Text to be analyzed and list of requested analysis methods. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AnalyzedTextResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project_service_id',
            'analyze_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyze" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_service_id' is set
        if self.api_client.client_side_validation and ('project_service_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_service_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_service_id` when calling `analyze`")  # noqa: E501
        # verify the required parameter 'analyze_request' is set
        if self.api_client.client_side_validation and ('analyze_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['analyze_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `analyze_request` when calling `analyze`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'project_service_id' in local_var_params:
            header_params['ProjectServiceId'] = local_var_params['project_service_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'analyze_request' in local_var_params:
            body_params = local_var_params['analyze_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenSignature']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-analysis/analyze', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalyzedTextResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def knowledge_graph_search(self, project_service_id, ids, **kwargs):  # noqa: E501
        """knowledge_graph_search  # noqa: E501

        Get information for given knowledge graph ids. Knowledge graph ids are returned by the entities extractor of the analyzed method. This returns detailed information on an entity including image and description.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.knowledge_graph_search(project_service_id, ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_service_id: Project service id of the client associated to the request (required)
        :param list[str] ids: Query knowledge graph ids (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KnowledgeGraphSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.knowledge_graph_search_with_http_info(project_service_id, ids, **kwargs)  # noqa: E501

    def knowledge_graph_search_with_http_info(self, project_service_id, ids, **kwargs):  # noqa: E501
        """knowledge_graph_search  # noqa: E501

        Get information for given knowledge graph ids. Knowledge graph ids are returned by the entities extractor of the analyzed method. This returns detailed information on an entity including image and description.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.knowledge_graph_search_with_http_info(project_service_id, ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_service_id: Project service id of the client associated to the request (required)
        :param list[str] ids: Query knowledge graph ids (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KnowledgeGraphSearchResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project_service_id',
            'ids'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method knowledge_graph_search" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_service_id' is set
        if self.api_client.client_side_validation and ('project_service_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_service_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_service_id` when calling `knowledge_graph_search`")  # noqa: E501
        # verify the required parameter 'ids' is set
        if self.api_client.client_side_validation and ('ids' not in local_var_params or  # noqa: E501
                                                        local_var_params['ids'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ids` when calling `knowledge_graph_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in local_var_params and local_var_params['ids'] is not None:  # noqa: E501
            query_params.append(('ids', local_var_params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}
        if 'project_service_id' in local_var_params:
            header_params['ProjectServiceId'] = local_var_params['project_service_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenSignature']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-analysis/knowledge-graph-search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KnowledgeGraphSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def segment_text(self, project_service_id, segment_text_request, **kwargs):  # noqa: E501
        """segment_text  # noqa: E501

        Create segments from a given text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segment_text(project_service_id, segment_text_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_service_id: Project service id of the client associated to the request (required)
        :param SegmentTextRequest segment_text_request: Request which contains the needed information for the segment operation. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SegmentTextResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.segment_text_with_http_info(project_service_id, segment_text_request, **kwargs)  # noqa: E501

    def segment_text_with_http_info(self, project_service_id, segment_text_request, **kwargs):  # noqa: E501
        """segment_text  # noqa: E501

        Create segments from a given text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.segment_text_with_http_info(project_service_id, segment_text_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_service_id: Project service id of the client associated to the request (required)
        :param SegmentTextRequest segment_text_request: Request which contains the needed information for the segment operation. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SegmentTextResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project_service_id',
            'segment_text_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method segment_text" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_service_id' is set
        if self.api_client.client_side_validation and ('project_service_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_service_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_service_id` when calling `segment_text`")  # noqa: E501
        # verify the required parameter 'segment_text_request' is set
        if self.api_client.client_side_validation and ('segment_text_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['segment_text_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `segment_text_request` when calling `segment_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'project_service_id' in local_var_params:
            header_params['ProjectServiceId'] = local_var_params['project_service_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'segment_text_request' in local_var_params:
            body_params = local_var_params['segment_text_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenSignature']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-analysis/segment-text', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SegmentTextResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def translate_captions(self, project_service_id, translate_captions_request, **kwargs):  # noqa: E501
        """translate_captions  # noqa: E501

        Translate captions from a given text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translate_captions(project_service_id, translate_captions_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_service_id: Project service id of the client associated to the request (required)
        :param TranslateCaptionsRequest translate_captions_request: Request which contains the needed information for the traslate captions operation. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TranslateCaptionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.translate_captions_with_http_info(project_service_id, translate_captions_request, **kwargs)  # noqa: E501

    def translate_captions_with_http_info(self, project_service_id, translate_captions_request, **kwargs):  # noqa: E501
        """translate_captions  # noqa: E501

        Translate captions from a given text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translate_captions_with_http_info(project_service_id, translate_captions_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_service_id: Project service id of the client associated to the request (required)
        :param TranslateCaptionsRequest translate_captions_request: Request which contains the needed information for the traslate captions operation. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TranslateCaptionsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project_service_id',
            'translate_captions_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method translate_captions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_service_id' is set
        if self.api_client.client_side_validation and ('project_service_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_service_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_service_id` when calling `translate_captions`")  # noqa: E501
        # verify the required parameter 'translate_captions_request' is set
        if self.api_client.client_side_validation and ('translate_captions_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['translate_captions_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `translate_captions_request` when calling `translate_captions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'project_service_id' in local_var_params:
            header_params['ProjectServiceId'] = local_var_params['project_service_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'translate_captions_request' in local_var_params:
            body_params = local_var_params['translate_captions_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenSignature']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-analysis/translate-captions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TranslateCaptionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def translate_text(self, project_service_id, translate_text_request, **kwargs):  # noqa: E501
        """translate_text  # noqa: E501

        Translate a given text to a target language.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translate_text(project_service_id, translate_text_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_service_id: Project service id of the client associated to the request (required)
        :param TranslateTextRequest translate_text_request: Request which contains the needed information for the translate operation. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TranslateTextResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.translate_text_with_http_info(project_service_id, translate_text_request, **kwargs)  # noqa: E501

    def translate_text_with_http_info(self, project_service_id, translate_text_request, **kwargs):  # noqa: E501
        """translate_text  # noqa: E501

        Translate a given text to a target language.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translate_text_with_http_info(project_service_id, translate_text_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project_service_id: Project service id of the client associated to the request (required)
        :param TranslateTextRequest translate_text_request: Request which contains the needed information for the translate operation. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TranslateTextResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project_service_id',
            'translate_text_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method translate_text" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project_service_id' is set
        if self.api_client.client_side_validation and ('project_service_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['project_service_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project_service_id` when calling `translate_text`")  # noqa: E501
        # verify the required parameter 'translate_text_request' is set
        if self.api_client.client_side_validation and ('translate_text_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['translate_text_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `translate_text_request` when calling `translate_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'project_service_id' in local_var_params:
            header_params['ProjectServiceId'] = local_var_params['project_service_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'translate_text_request' in local_var_params:
            body_params = local_var_params['translate_text_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenSignature']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-analysis/translate-text', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TranslateTextResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
