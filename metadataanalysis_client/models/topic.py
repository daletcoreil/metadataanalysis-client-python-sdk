# coding: utf-8

"""
    Dalet Metadata Analysis API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: cortexsupport@dalet.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from metadataanalysis_client.configuration import Configuration


class Topic(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'label': 'str',
        'wiki_link': 'str',
        'score': 'float',
        'wikidata_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'wiki_link': 'wikiLink',
        'score': 'score',
        'wikidata_id': 'wikidataId'
    }

    def __init__(self, id=None, label=None, wiki_link=None, score=None, wikidata_id=None, local_vars_configuration=None):  # noqa: E501
        """Topic - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._label = None
        self._wiki_link = None
        self._score = None
        self._wikidata_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if wiki_link is not None:
            self.wiki_link = wiki_link
        if score is not None:
            self.score = score
        if wikidata_id is not None:
            self.wikidata_id = wikidata_id

    @property
    def id(self):
        """Gets the id of this Topic.  # noqa: E501


        :return: The id of this Topic.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Topic.


        :param id: The id of this Topic.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Topic.  # noqa: E501


        :return: The label of this Topic.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Topic.


        :param label: The label of this Topic.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def wiki_link(self):
        """Gets the wiki_link of this Topic.  # noqa: E501

        Link to Wikipedia for this topic, or None if this topic couldn't be linked to a Wikipedia page.  # noqa: E501

        :return: The wiki_link of this Topic.  # noqa: E501
        :rtype: str
        """
        return self._wiki_link

    @wiki_link.setter
    def wiki_link(self, wiki_link):
        """Sets the wiki_link of this Topic.

        Link to Wikipedia for this topic, or None if this topic couldn't be linked to a Wikipedia page.  # noqa: E501

        :param wiki_link: The wiki_link of this Topic.  # noqa: E501
        :type: str
        """

        self._wiki_link = wiki_link

    @property
    def score(self):
        """Gets the score of this Topic.  # noqa: E501

        The relevance of this topic to the processed document. This score ranges from 0 to 1, with 1 representing the highest relevance of the topic to the processed document.  # noqa: E501

        :return: The score of this Topic.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Topic.

        The relevance of this topic to the processed document. This score ranges from 0 to 1, with 1 representing the highest relevance of the topic to the processed document.  # noqa: E501

        :param score: The score of this Topic.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def wikidata_id(self):
        """Gets the wikidata_id of this Topic.  # noqa: E501

        The disambiguated Wikidata QID for this topic, or None if either this topic could not be disambiguated, or a Wikidata link doesn’t exist.  # noqa: E501

        :return: The wikidata_id of this Topic.  # noqa: E501
        :rtype: str
        """
        return self._wikidata_id

    @wikidata_id.setter
    def wikidata_id(self, wikidata_id):
        """Sets the wikidata_id of this Topic.

        The disambiguated Wikidata QID for this topic, or None if either this topic could not be disambiguated, or a Wikidata link doesn’t exist.  # noqa: E501

        :param wikidata_id: The wikidata_id of this Topic.  # noqa: E501
        :type: str
        """

        self._wikidata_id = wikidata_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Topic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Topic):
            return True

        return self.to_dict() != other.to_dict()
