# coding: utf-8

"""
    Dalet Metadata Analysis API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: cortexsupport@dalet.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from metadataanalysis_client.configuration import Configuration


class TranslateCaptionsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_subtitle': 'Locator',
        'output_location': 'TranslateCaptionsResponse',
        'target_language': 'str',
        'skeleton_mode': 'bool',
        'source_language': 'str'
    }

    attribute_map = {
        'source_subtitle': 'sourceSubtitle',
        'output_location': 'outputLocation',
        'target_language': 'targetLanguage',
        'skeleton_mode': 'skeletonMode',
        'source_language': 'sourceLanguage'
    }

    def __init__(self, source_subtitle=None, output_location=None, target_language=None, skeleton_mode=True, source_language=None, local_vars_configuration=None):  # noqa: E501
        """TranslateCaptionsRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._source_subtitle = None
        self._output_location = None
        self._target_language = None
        self._skeleton_mode = None
        self._source_language = None
        self.discriminator = None

        self.source_subtitle = source_subtitle
        self.output_location = output_location
        self.target_language = target_language
        self.skeleton_mode = skeleton_mode
        if source_language is not None:
            self.source_language = source_language

    @property
    def source_subtitle(self):
        """Gets the source_subtitle of this TranslateCaptionsRequest.  # noqa: E501


        :return: The source_subtitle of this TranslateCaptionsRequest.  # noqa: E501
        :rtype: Locator
        """
        return self._source_subtitle

    @source_subtitle.setter
    def source_subtitle(self, source_subtitle):
        """Sets the source_subtitle of this TranslateCaptionsRequest.


        :param source_subtitle: The source_subtitle of this TranslateCaptionsRequest.  # noqa: E501
        :type: Locator
        """
        if self.local_vars_configuration.client_side_validation and source_subtitle is None:  # noqa: E501
            raise ValueError("Invalid value for `source_subtitle`, must not be `None`")  # noqa: E501

        self._source_subtitle = source_subtitle

    @property
    def output_location(self):
        """Gets the output_location of this TranslateCaptionsRequest.  # noqa: E501


        :return: The output_location of this TranslateCaptionsRequest.  # noqa: E501
        :rtype: TranslateCaptionsResponse
        """
        return self._output_location

    @output_location.setter
    def output_location(self, output_location):
        """Sets the output_location of this TranslateCaptionsRequest.


        :param output_location: The output_location of this TranslateCaptionsRequest.  # noqa: E501
        :type: TranslateCaptionsResponse
        """
        if self.local_vars_configuration.client_side_validation and output_location is None:  # noqa: E501
            raise ValueError("Invalid value for `output_location`, must not be `None`")  # noqa: E501

        self._output_location = output_location

    @property
    def target_language(self):
        """Gets the target_language of this TranslateCaptionsRequest.  # noqa: E501


        :return: The target_language of this TranslateCaptionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_language

    @target_language.setter
    def target_language(self, target_language):
        """Sets the target_language of this TranslateCaptionsRequest.


        :param target_language: The target_language of this TranslateCaptionsRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and target_language is None:  # noqa: E501
            raise ValueError("Invalid value for `target_language`, must not be `None`")  # noqa: E501

        self._target_language = target_language

    @property
    def skeleton_mode(self):
        """Gets the skeleton_mode of this TranslateCaptionsRequest.  # noqa: E501


        :return: The skeleton_mode of this TranslateCaptionsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._skeleton_mode

    @skeleton_mode.setter
    def skeleton_mode(self, skeleton_mode):
        """Sets the skeleton_mode of this TranslateCaptionsRequest.


        :param skeleton_mode: The skeleton_mode of this TranslateCaptionsRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and skeleton_mode is None:  # noqa: E501
            raise ValueError("Invalid value for `skeleton_mode`, must not be `None`")  # noqa: E501

        self._skeleton_mode = skeleton_mode

    @property
    def source_language(self):
        """Gets the source_language of this TranslateCaptionsRequest.  # noqa: E501


        :return: The source_language of this TranslateCaptionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this TranslateCaptionsRequest.


        :param source_language: The source_language of this TranslateCaptionsRequest.  # noqa: E501
        :type: str
        """

        self._source_language = source_language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranslateCaptionsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TranslateCaptionsRequest):
            return True

        return self.to_dict() != other.to_dict()
