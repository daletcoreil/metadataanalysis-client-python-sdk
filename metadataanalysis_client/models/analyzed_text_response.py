# coding: utf-8

"""
    Dalet Metadata Analysis API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: cortexsupport@dalet.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from metadataanalysis_client.configuration import Configuration


class AnalyzedTextResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'language': 'str',
        'language_is_reliable': 'bool',
        'entities': 'list[Entity]',
        'topics': 'list[Topic]',
        'categories': 'list[ClassifierCategory]'
    }

    attribute_map = {
        'language': 'language',
        'language_is_reliable': 'languageIsReliable',
        'entities': 'entities',
        'topics': 'topics',
        'categories': 'categories'
    }

    def __init__(self, language=None, language_is_reliable=None, entities=None, topics=None, categories=None, local_vars_configuration=None):  # noqa: E501
        """AnalyzedTextResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._language = None
        self._language_is_reliable = None
        self._entities = None
        self._topics = None
        self._categories = None
        self.discriminator = None

        self.language = language
        if language_is_reliable is not None:
            self.language_is_reliable = language_is_reliable
        if entities is not None:
            self.entities = entities
        if topics is not None:
            self.topics = topics
        if categories is not None:
            self.categories = categories

    @property
    def language(self):
        """Gets the language of this AnalyzedTextResponse.  # noqa: E501


        :return: The language of this AnalyzedTextResponse.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AnalyzedTextResponse.


        :param language: The language of this AnalyzedTextResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and language is None:  # noqa: E501
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def language_is_reliable(self):
        """Gets the language_is_reliable of this AnalyzedTextResponse.  # noqa: E501


        :return: The language_is_reliable of this AnalyzedTextResponse.  # noqa: E501
        :rtype: bool
        """
        return self._language_is_reliable

    @language_is_reliable.setter
    def language_is_reliable(self, language_is_reliable):
        """Sets the language_is_reliable of this AnalyzedTextResponse.


        :param language_is_reliable: The language_is_reliable of this AnalyzedTextResponse.  # noqa: E501
        :type: bool
        """

        self._language_is_reliable = language_is_reliable

    @property
    def entities(self):
        """Gets the entities of this AnalyzedTextResponse.  # noqa: E501


        :return: The entities of this AnalyzedTextResponse.  # noqa: E501
        :rtype: list[Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this AnalyzedTextResponse.


        :param entities: The entities of this AnalyzedTextResponse.  # noqa: E501
        :type: list[Entity]
        """

        self._entities = entities

    @property
    def topics(self):
        """Gets the topics of this AnalyzedTextResponse.  # noqa: E501

        List of topics detected in the text. each detected topic refers to wikiLink and wikidataId or None if no wikipedia reference is found.  # noqa: E501

        :return: The topics of this AnalyzedTextResponse.  # noqa: E501
        :rtype: list[Topic]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this AnalyzedTextResponse.

        List of topics detected in the text. each detected topic refers to wikiLink and wikidataId or None if no wikipedia reference is found.  # noqa: E501

        :param topics: The topics of this AnalyzedTextResponse.  # noqa: E501
        :type: list[Topic]
        """

        self._topics = topics

    @property
    def categories(self):
        """Gets the categories of this AnalyzedTextResponse.  # noqa: E501

        List of categories associated to the text. IPTC news codes refer to - http://cv.iptc.org/newscodes/subjectcode IPTC media topics refer to - http://cv.iptc.org/newscodes/mediatopic IAB taxonomy refer to - https://www.iab.com/guidelines/taxonomy  # noqa: E501

        :return: The categories of this AnalyzedTextResponse.  # noqa: E501
        :rtype: list[ClassifierCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this AnalyzedTextResponse.

        List of categories associated to the text. IPTC news codes refer to - http://cv.iptc.org/newscodes/subjectcode IPTC media topics refer to - http://cv.iptc.org/newscodes/mediatopic IAB taxonomy refer to - https://www.iab.com/guidelines/taxonomy  # noqa: E501

        :param categories: The categories of this AnalyzedTextResponse.  # noqa: E501
        :type: list[ClassifierCategory]
        """

        self._categories = categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyzedTextResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalyzedTextResponse):
            return True

        return self.to_dict() != other.to_dict()
