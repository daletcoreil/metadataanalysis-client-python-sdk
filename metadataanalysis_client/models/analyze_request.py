# coding: utf-8

"""
    Dalet Metadata Analysis API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: cortexsupport@dalet.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from metadataanalysis_client.configuration import Configuration


class AnalyzeRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'text': 'str',
        'extractors': 'list[str]',
        'extractors_score_threshold': 'float',
        'classifiers': 'list[str]',
        'classifier_score_threshold': 'float'
    }

    attribute_map = {
        'text': 'text',
        'extractors': 'extractors',
        'extractors_score_threshold': 'extractorsScoreThreshold',
        'classifiers': 'classifiers',
        'classifier_score_threshold': 'classifierScoreThreshold'
    }

    def __init__(self, text=None, extractors=None, extractors_score_threshold=None, classifiers=None, classifier_score_threshold=None, local_vars_configuration=None):  # noqa: E501
        """AnalyzeRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._text = None
        self._extractors = None
        self._extractors_score_threshold = None
        self._classifiers = None
        self._classifier_score_threshold = None
        self.discriminator = None

        self.text = text
        if extractors is not None:
            self.extractors = extractors
        if extractors_score_threshold is not None:
            self.extractors_score_threshold = extractors_score_threshold
        if classifiers is not None:
            self.classifiers = classifiers
        if classifier_score_threshold is not None:
            self.classifier_score_threshold = classifier_score_threshold

    @property
    def text(self):
        """Gets the text of this AnalyzeRequest.  # noqa: E501

        Up to 200kb of UTF-8 encoded raw text to be analyzed. The language is detected automatically and it should be one of the following: English (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Russian (ru), Spanish (es)  # noqa: E501

        :return: The text of this AnalyzeRequest.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AnalyzeRequest.

        Up to 200kb of UTF-8 encoded raw text to be analyzed. The language is detected automatically and it should be one of the following: English (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Russian (ru), Spanish (es)  # noqa: E501

        :param text: The text of this AnalyzeRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and text is None:  # noqa: E501
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def extractors(self):
        """Gets the extractors of this AnalyzeRequest.  # noqa: E501

        Extractors detect spans in the text and return their normalized description.  # noqa: E501

        :return: The extractors of this AnalyzeRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._extractors

    @extractors.setter
    def extractors(self, extractors):
        """Sets the extractors of this AnalyzeRequest.

        Extractors detect spans in the text and return their normalized description.  # noqa: E501

        :param extractors: The extractors of this AnalyzeRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["entities", "topics"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(extractors).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `extractors` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(extractors) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._extractors = extractors

    @property
    def extractors_score_threshold(self):
        """Gets the extractors_score_threshold of this AnalyzeRequest.  # noqa: E501

        Only return extractors results with score above the threshold between 0 and 1. if not specified return all results.  # noqa: E501

        :return: The extractors_score_threshold of this AnalyzeRequest.  # noqa: E501
        :rtype: float
        """
        return self._extractors_score_threshold

    @extractors_score_threshold.setter
    def extractors_score_threshold(self, extractors_score_threshold):
        """Sets the extractors_score_threshold of this AnalyzeRequest.

        Only return extractors results with score above the threshold between 0 and 1. if not specified return all results.  # noqa: E501

        :param extractors_score_threshold: The extractors_score_threshold of this AnalyzeRequest.  # noqa: E501
        :type: float
        """

        self._extractors_score_threshold = extractors_score_threshold

    @property
    def classifiers(self):
        """Gets the classifiers of this AnalyzeRequest.  # noqa: E501

        Classifiers categorize the whole text according to industry standard taxonomies.  # noqa: E501

        :return: The classifiers of this AnalyzeRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._classifiers

    @classifiers.setter
    def classifiers(self, classifiers):
        """Sets the classifiers of this AnalyzeRequest.

        Classifiers categorize the whole text according to industry standard taxonomies.  # noqa: E501

        :param classifiers: The classifiers of this AnalyzeRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["IPTCNewsCodes", "IPTCMediaTopics", "IABTaxonomy"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(classifiers).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `classifiers` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(classifiers) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._classifiers = classifiers

    @property
    def classifier_score_threshold(self):
        """Gets the classifier_score_threshold of this AnalyzeRequest.  # noqa: E501

        Only return categories with score above the threshold between 0 and 1. if not specified return all detected categories.  # noqa: E501

        :return: The classifier_score_threshold of this AnalyzeRequest.  # noqa: E501
        :rtype: float
        """
        return self._classifier_score_threshold

    @classifier_score_threshold.setter
    def classifier_score_threshold(self, classifier_score_threshold):
        """Sets the classifier_score_threshold of this AnalyzeRequest.

        Only return categories with score above the threshold between 0 and 1. if not specified return all detected categories.  # noqa: E501

        :param classifier_score_threshold: The classifier_score_threshold of this AnalyzeRequest.  # noqa: E501
        :type: float
        """

        self._classifier_score_threshold = classifier_score_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyzeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalyzeRequest):
            return True

        return self.to_dict() != other.to_dict()
