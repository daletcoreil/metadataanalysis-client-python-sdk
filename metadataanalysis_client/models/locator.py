# coding: utf-8

"""
    Dalet Metadata Analysis API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: cortexsupport@dalet.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from metadataanalysis_client.configuration import Configuration


class Locator(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws_s3_bucket': 'str',
        'aws_s3_key': 'str',
        'http_endpoint': 'str'
    }

    attribute_map = {
        'aws_s3_bucket': 'awsS3Bucket',
        'aws_s3_key': 'awsS3Key',
        'http_endpoint': 'httpEndpoint'
    }

    def __init__(self, aws_s3_bucket=None, aws_s3_key=None, http_endpoint=None, local_vars_configuration=None):  # noqa: E501
        """Locator - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aws_s3_bucket = None
        self._aws_s3_key = None
        self._http_endpoint = None
        self.discriminator = None

        self.aws_s3_bucket = aws_s3_bucket
        self.aws_s3_key = aws_s3_key
        self.http_endpoint = http_endpoint

    @property
    def aws_s3_bucket(self):
        """Gets the aws_s3_bucket of this Locator.  # noqa: E501

        Name of an AWS S3 bucket  # noqa: E501

        :return: The aws_s3_bucket of this Locator.  # noqa: E501
        :rtype: str
        """
        return self._aws_s3_bucket

    @aws_s3_bucket.setter
    def aws_s3_bucket(self, aws_s3_bucket):
        """Sets the aws_s3_bucket of this Locator.

        Name of an AWS S3 bucket  # noqa: E501

        :param aws_s3_bucket: The aws_s3_bucket of this Locator.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and aws_s3_bucket is None:  # noqa: E501
            raise ValueError("Invalid value for `aws_s3_bucket`, must not be `None`")  # noqa: E501

        self._aws_s3_bucket = aws_s3_bucket

    @property
    def aws_s3_key(self):
        """Gets the aws_s3_key of this Locator.  # noqa: E501

        Name of a file in the AWS S3 bucket. For example, name of media file to be indexed in an Input Locator or name of a JSON file in an Output Locator.  # noqa: E501

        :return: The aws_s3_key of this Locator.  # noqa: E501
        :rtype: str
        """
        return self._aws_s3_key

    @aws_s3_key.setter
    def aws_s3_key(self, aws_s3_key):
        """Sets the aws_s3_key of this Locator.

        Name of a file in the AWS S3 bucket. For example, name of media file to be indexed in an Input Locator or name of a JSON file in an Output Locator.  # noqa: E501

        :param aws_s3_key: The aws_s3_key of this Locator.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and aws_s3_key is None:  # noqa: E501
            raise ValueError("Invalid value for `aws_s3_key`, must not be `None`")  # noqa: E501

        self._aws_s3_key = aws_s3_key

    @property
    def http_endpoint(self):
        """Gets the http_endpoint of this Locator.  # noqa: E501

        Public URL to access the file in the bucket. Must be computed using the AWS SDK method `GeneratePresignedUrl`  # noqa: E501

        :return: The http_endpoint of this Locator.  # noqa: E501
        :rtype: str
        """
        return self._http_endpoint

    @http_endpoint.setter
    def http_endpoint(self, http_endpoint):
        """Sets the http_endpoint of this Locator.

        Public URL to access the file in the bucket. Must be computed using the AWS SDK method `GeneratePresignedUrl`  # noqa: E501

        :param http_endpoint: The http_endpoint of this Locator.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and http_endpoint is None:  # noqa: E501
            raise ValueError("Invalid value for `http_endpoint`, must not be `None`")  # noqa: E501

        self._http_endpoint = http_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Locator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Locator):
            return True

        return self.to_dict() != other.to_dict()
