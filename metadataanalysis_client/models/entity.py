# coding: utf-8

"""
    Dalet Metadata Analysis API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: cortexsupport@dalet.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from metadataanalysis_client.configuration import Configuration


class Entity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'type': 'str',
        'mid': 'str',
        'wikipedia_url': 'str',
        'salience': 'float',
        'mentions': 'list[Mention]'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'mid': 'mid',
        'wikipedia_url': 'wikipediaUrl',
        'salience': 'salience',
        'mentions': 'mentions'
    }

    def __init__(self, name=None, type=None, mid=None, wikipedia_url=None, salience=None, mentions=None, local_vars_configuration=None):  # noqa: E501
        """Entity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._type = None
        self._mid = None
        self._wikipedia_url = None
        self._salience = None
        self._mentions = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if mid is not None:
            self.mid = mid
        if wikipedia_url is not None:
            self.wikipedia_url = wikipedia_url
        if salience is not None:
            self.salience = salience
        if mentions is not None:
            self.mentions = mentions

    @property
    def name(self):
        """Gets the name of this Entity.  # noqa: E501


        :return: The name of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Entity.


        :param name: The name of this Entity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Entity.  # noqa: E501


        :return: The type of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entity.


        :param type: The type of this Entity.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "PERSON", "LOCATION", "ORGANIZATION", "EVENT", "WORKOFART", "CONSUMERGOOD", "OTHER", "PHONENUMBER", "ADDRESS", "DATE", "NUMBER", "PRICE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def mid(self):
        """Gets the mid of this Entity.  # noqa: E501

        Google knowledge graph id when detected.  # noqa: E501

        :return: The mid of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._mid

    @mid.setter
    def mid(self, mid):
        """Sets the mid of this Entity.

        Google knowledge graph id when detected.  # noqa: E501

        :param mid: The mid of this Entity.  # noqa: E501
        :type: str
        """

        self._mid = mid

    @property
    def wikipedia_url(self):
        """Gets the wikipedia_url of this Entity.  # noqa: E501


        :return: The wikipedia_url of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._wikipedia_url

    @wikipedia_url.setter
    def wikipedia_url(self, wikipedia_url):
        """Sets the wikipedia_url of this Entity.


        :param wikipedia_url: The wikipedia_url of this Entity.  # noqa: E501
        :type: str
        """

        self._wikipedia_url = wikipedia_url

    @property
    def salience(self):
        """Gets the salience of this Entity.  # noqa: E501

        The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient.  # noqa: E501

        :return: The salience of this Entity.  # noqa: E501
        :rtype: float
        """
        return self._salience

    @salience.setter
    def salience(self, salience):
        """Sets the salience of this Entity.

        The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient.  # noqa: E501

        :param salience: The salience of this Entity.  # noqa: E501
        :type: float
        """

        self._salience = salience

    @property
    def mentions(self):
        """Gets the mentions of this Entity.  # noqa: E501


        :return: The mentions of this Entity.  # noqa: E501
        :rtype: list[Mention]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this Entity.


        :param mentions: The mentions of this Entity.  # noqa: E501
        :type: list[Mention]
        """

        self._mentions = mentions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Entity):
            return True

        return self.to_dict() != other.to_dict()
