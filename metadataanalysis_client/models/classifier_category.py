# coding: utf-8

"""
    Dalet Metadata Analysis API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: cortexsupport@dalet.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from metadataanalysis_client.configuration import Configuration


class ClassifierCategory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'classifier_id': 'str',
        'category_id': 'str',
        'label': 'str',
        'score': 'float'
    }

    attribute_map = {
        'id': 'id',
        'classifier_id': 'classifierId',
        'category_id': 'categoryId',
        'label': 'label',
        'score': 'score'
    }

    def __init__(self, id=None, classifier_id=None, category_id=None, label=None, score=None, local_vars_configuration=None):  # noqa: E501
        """ClassifierCategory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._classifier_id = None
        self._category_id = None
        self._label = None
        self._score = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if classifier_id is not None:
            self.classifier_id = classifier_id
        if category_id is not None:
            self.category_id = category_id
        if label is not None:
            self.label = label
        if score is not None:
            self.score = score

    @property
    def id(self):
        """Gets the id of this ClassifierCategory.  # noqa: E501


        :return: The id of this ClassifierCategory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClassifierCategory.


        :param id: The id of this ClassifierCategory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def classifier_id(self):
        """Gets the classifier_id of this ClassifierCategory.  # noqa: E501


        :return: The classifier_id of this ClassifierCategory.  # noqa: E501
        :rtype: str
        """
        return self._classifier_id

    @classifier_id.setter
    def classifier_id(self, classifier_id):
        """Sets the classifier_id of this ClassifierCategory.


        :param classifier_id: The classifier_id of this ClassifierCategory.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPTCNewsCodes", "IPTCMediaTopics", "IABTaxonomy"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and classifier_id not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `classifier_id` ({0}), must be one of {1}"  # noqa: E501
                .format(classifier_id, allowed_values)
            )

        self._classifier_id = classifier_id

    @property
    def category_id(self):
        """Gets the category_id of this ClassifierCategory.  # noqa: E501


        :return: The category_id of this ClassifierCategory.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ClassifierCategory.


        :param category_id: The category_id of this ClassifierCategory.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def label(self):
        """Gets the label of this ClassifierCategory.  # noqa: E501


        :return: The label of this ClassifierCategory.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ClassifierCategory.


        :param label: The label of this ClassifierCategory.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def score(self):
        """Gets the score of this ClassifierCategory.  # noqa: E501


        :return: The score of this ClassifierCategory.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ClassifierCategory.


        :param score: The score of this ClassifierCategory.  # noqa: E501
        :type: float
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassifierCategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClassifierCategory):
            return True

        return self.to_dict() != other.to_dict()
